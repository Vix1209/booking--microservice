version: '3.8'

services:
  # Main booking microservice application
  booking-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: booking-microservice
    ports:
      - "5000:5000"  # Main API port
      - "5001:5001"  # Job service port
      - "3001:3001"  # WebSocket port
    environment:
      - NODE_ENV=production
      - PORT=5000
      - JOB_PORT=5001
      - WS_PORT=3001
      - WS_CORS_ORIGIN=http://localhost:3000
      # Database configuration (using cloud URLs)
      - POSTGRES_CLOUD_DB_URL=${POSTGRES_CLOUD_DB_URL}
      - POSTGRES_SYNC=${POSTGRES_SYNC:-false}
      # Redis configuration (using cloud URL)
      - REDIS_URL=${REDIS_URL}
      # JWT configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME:-15m}
      - REFRESH_JWT_SECRET_KEY=${REFRESH_JWT_SECRET_KEY}
      - REFRESH_JWT_EXPIRATION_TIME=${REFRESH_JWT_EXPIRATION_TIME:-7d}
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - booking-network

  # Development service (optional - for development with hot reload)
  booking-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: booking-microservice-dev
    ports:
      - "5000:5000"
      - "5001:5001"
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - JOB_PORT=5001
      - WS_PORT=3001
      - WS_CORS_ORIGIN=http://localhost:3000
      - POSTGRES_CLOUD_DB_URL=${POSTGRES_CLOUD_DB_URL}
      - POSTGRES_SYNC=${POSTGRES_SYNC:-true}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME:-15m}
      - REFRESH_JWT_SECRET_KEY=${REFRESH_JWT_SECRET_KEY}
      - REFRESH_JWT_EXPIRATION_TIME=${REFRESH_JWT_EXPIRATION_TIME:-7d}
    volumes:
      - .:/app
      - /app/node_modules
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - booking-network
    profiles:
      - dev

networks:
  booking-network:
    driver: bridge

volumes:
  node_modules: