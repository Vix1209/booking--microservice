version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: booking-postgres
    environment:
      POSTGRES_DB: booking_db
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - booking-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U booking_user -d booking_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: booking-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - booking-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Booking Microservice
  booking-service:
    build:
      context: .
      target: booking-runner
    container_name: booking-service
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: booking_user
      DATABASE_PASSWORD: booking_password
      DATABASE_NAME: booking_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ''
      REDIS_DB: 0
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      WEBSOCKET_PORT: 3002
      WEBSOCKET_CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Job Service for background processing
  job-service:
    build:
      context: .
      target: job-runner
    container_name: job-service
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ''
      REDIS_DB: 0
      JOB_PORT: 3001
      WEBSOCKET_PORT: 3002
      WEBSOCKET_CORS_ORIGIN: http://localhost:3000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - booking-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3001/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: booking-nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - booking-service
      - job-service
    networks:
      - booking-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  booking-network:
    driver: bridge
